"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidDatabaseType = exports.init = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../../../core/constants");
const core_1 = require("../../../../core");
const dataApiBuilder_1 = require("../../../../core/dataApiBuilder");
async function init(options) {
    let { databaseType, connectionString, cosmosdb_nosqlContainer, cosmosdb_nosqlDatabase } = options;
    if (databaseType === undefined || !isValidDatabaseType(databaseType)) {
        core_1.logger.error(`--database-type is a required field. Please provide the type of the database you want to connect (mssql, postgresql, cosmosdb_nosql, mysql, cosmosdb_postgresql).`, true);
        return;
    }
    // 1. create folder swa-db-connections if it doesn't exist
    const folderName = (options === null || options === void 0 ? void 0 : options.folderName) ? options.folderName : constants_1.DATA_API_BUILDER_DEFAULT_FOLDER;
    const directory = path_1.default.join(process.cwd(), folderName);
    if (!fs_1.default.existsSync(directory)) {
        core_1.logger.log(`Creating database connections configuration folder ${folderName}`, "swa");
        fs_1.default.mkdirSync(directory);
    }
    else {
        core_1.logger.log(`Folder ${folderName} already exists, using that folder for creating data-api files`, "swa");
    }
    // 2. create file staticwebapp.database.config.json by calling dab init and passing through options
    const configFile = path_1.default.join(directory, constants_1.DATA_API_BUILDER_DEFAULT_CONFIG_FILE_NAME);
    if (fs_1.default.existsSync(configFile)) {
        core_1.logger.error(`Config file ${configFile} already exists. Please provide a different name or remove the existing config file.`, true);
    }
    core_1.logger.log(`Creating ${constants_1.DATA_API_BUILDER_DEFAULT_CONFIG_FILE_NAME} configuration file`, "swa");
    const dataApiBinary = await (0, dataApiBuilder_1.getDataApiBuilderBinaryPath)();
    if (!dataApiBinary) {
        core_1.logger.error(`Could not find or install ${constants_1.DATA_API_BUILDER_BINARY_NAME} binary.
    If you already have data-api-builder installed, try running "dab init" directly to generate the config file. Exiting!!`, true);
    }
    let args = [
        "init",
        "--database-type",
        databaseType,
        "--config",
        constants_1.DATA_API_BUILDER_DEFAULT_CONFIG_FILE_NAME,
        "--rest.path",
        constants_1.DATA_API_BUILDER_DEFAULT_REST_PATH,
    ];
    if (connectionString) {
        args = [...args, "--connection-string", connectionString];
    }
    if (cosmosdb_nosqlContainer) {
        args = [...args, "--cosmosdb_nosql-container", cosmosdb_nosqlContainer];
        if (databaseType != constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql) {
            core_1.logger.warn(`Database type is not ${constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql}, --cosmosdb_nosql-container will be ignored.`);
        }
    }
    if (cosmosdb_nosqlDatabase) {
        args = [...args, "--cosmosdb_nosql-database", cosmosdb_nosqlDatabase];
        if (databaseType != constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql) {
            core_1.logger.warn(`Database type is not ${constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql}, --cosmosdb_nosql-database will be ignored.`);
        }
    }
    if (databaseType === constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql) {
        if (!cosmosdb_nosqlDatabase) {
            core_1.logger.error(`--cosmosdb_nosql-database is required when database-type is cosmosdb_nosql, ${constants_1.DATA_API_BUILDER_DEFAULT_CONFIG_FILE_NAME} will not be created`, true);
        }
        // create file staticwebapp.database.schema.json directly if database type cosmosdb_nosql since needed argument
        const schemaFile = path_1.default.join(directory, constants_1.DATA_API_BUILDER_DEFAULT_SCHEMA_FILE_NAME);
        if (fs_1.default.existsSync(schemaFile)) {
            core_1.logger.warn(`Schema file exists ${schemaFile}. This content will be replaced.`);
        }
        core_1.logger.info(`Creating ${constants_1.DATA_API_BUILDER_DEFAULT_SCHEMA_FILE_NAME} schema file`, "swa");
        try {
            fs_1.default.writeFileSync(schemaFile, constants_1.DEFAULT_DATA_API_BUILDER_SCHEMA_CONTENT);
        }
        catch (ex) {
            core_1.logger.warn(`Unable to write/modify schema file. Exception : ${ex}`);
        }
        args = [...args, "--graphql-schema", constants_1.DATA_API_BUILDER_DEFAULT_SCHEMA_FILE_NAME];
    }
    // todo:DAB CLI doesn't return an error code when it fails, so we need to allow stdio to be inherited (this will be fixed in the March release)
    // It would be better to have our own logs since DAB CLI refers to itself in its success messages
    // which may lead to confusion for swa cli users ex: `SUGGESTION: Use 'dab add [entity-name] [options]' to add new entities in your config.`
    (0, core_1.execFileCommand)(dataApiBinary, directory, args);
    // not logging anything here since DAB CLI logs success messages or error messages and we can't catch an error
}
exports.init = init;
function isValidDatabaseType(databaseType) {
    if (databaseType == constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbNoSql ||
        databaseType == constants_1.DATA_API_BUILDER_DATABASE_TYPES.CosmosDbPostGreSql ||
        databaseType == constants_1.DATA_API_BUILDER_DATABASE_TYPES.MsSql ||
        databaseType == constants_1.DATA_API_BUILDER_DATABASE_TYPES.MySql ||
        databaseType == constants_1.DATA_API_BUILDER_DATABASE_TYPES.PostGreSql) {
        return true;
    }
    return false;
}
exports.isValidDatabaseType = isValidDatabaseType;
//# sourceMappingURL=init.js.map