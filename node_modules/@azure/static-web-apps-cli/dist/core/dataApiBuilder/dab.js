"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultDataApiBuilderBinaryForOS = exports.installAndGetDataApiBuilder = void 0;
const constants_1 = require("../constants");
const node_fetch_1 = __importDefault(require("node-fetch"));
const util_1 = require("util");
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
const download_binary_helper_1 = require("../download-binary-helper");
/**
 * Gets the filepath where the Microsoft.DataApiBuilder.exe is located
 *  - Gets the latest version from the manifest file
 *  - Checks if it is installed and is latest or not already
 *  - Gets the installed path if it is already present
 *  - Downloads, unzips and Installs if not already present
 * @params null
 *
 * @returns binaryPath
 */
async function installAndGetDataApiBuilder() {
    const platform = (0, utils_1.getPlatform)();
    if (!platform) {
        throw new Error(`Unsupported platform: ${os_1.default.platform()}`);
    }
    const releaseMetadata = (await getReleaseDataApiBuilderMetadata()).releaseMetadata;
    if (releaseMetadata === undefined) {
        throw new Error(`Could not load ${constants_1.DATA_API_BUILDER_BINARY_NAME} metadata from remote. Please check your internet connection.`); // should we throw error and stop or can we allow users to use local version
    }
    const isLatestVersionInstalled = await isLocalVersionInstalledAndLatest(releaseMetadata.versionId);
    if (!isLatestVersionInstalled) {
        const binaryPath = await downloadAndUnzipBinary(releaseMetadata, platform);
        if (binaryPath != undefined) {
            return {
                binaryPath: binaryPath,
            };
        }
    }
    return {
        binaryPath: constants_1.DATA_API_BUILDER_COMMAND,
    };
}
exports.installAndGetDataApiBuilder = installAndGetDataApiBuilder;
/**
 *
 * @param releaseMetadata Release metadata obtained from DATA_API_BUILDER_RELEASE_METADATA_URL
 * @param platform Current OS
 * @returns Binary Path after downloading and extracting
 */
async function downloadAndUnzipBinary(releaseMetadata, platform) {
    try {
        const destDirectory = path_1.default.join(constants_1.DATA_API_BUILDER_FOLDER, releaseMetadata.versionId);
        const binaryPath = path_1.default.join(destDirectory, getDefaultDataApiBuilderBinaryForOS(platform));
        if (!fs_1.default.existsSync(binaryPath)) {
            utils_1.logger.silly(`Downloading the version ${releaseMetadata.versionId}`);
            const zipFilePath = await (0, download_binary_helper_1.downloadAndValidateBinary)(releaseMetadata, constants_1.DATA_API_BUILDER_BINARY_NAME, constants_1.DATA_API_BUILDER_FOLDER, releaseMetadata === null || releaseMetadata === void 0 ? void 0 : releaseMetadata.versionId, platform);
            extractBinary(zipFilePath, destDirectory);
        }
        if (platform == "linux-x64" || platform == "osx-x64") {
            utils_1.logger.silly(`Setting executable permissions for data-api-builder binary`);
            fs_1.default.chmodSync(binaryPath, 0o755);
        }
        return binaryPath;
    }
    catch (ex) {
        utils_1.logger.error(`Unable to download/extract ${constants_1.DATA_API_BUILDER_BINARY_NAME} binary. Exception ${ex}`);
        return undefined;
    }
}
/**
 * Fetches the latest version, metadata of Microsoft.DataApiBuilder.exe from DATA_API_BUILDER_RELEASE_METADATA_URL
 * @returns DataApiBuilderReleaseMetadata
 */
async function getReleaseDataApiBuilderMetadata() {
    const response = await (0, node_fetch_1.default)(constants_1.DATA_API_BUILDER_RELEASE_METADATA_URL);
    const responseMetadata = (await response.json());
    if (Array.isArray(responseMetadata)) {
        const releaseMetadata = responseMetadata.find((c) => c.version === constants_1.DATA_API_BUILDER_LATEST_TAG); // If we want to proceed with downloading the latest tag
        // const releaseMetadata = responseMetadata.find((c) => c.versionId === DATA_API_BUILDER_VERSION_ID); // If we want to pin a specific version
        return {
            releaseMetadata: releaseMetadata,
        };
    }
    else {
        return {
            releaseMetadata: undefined,
        };
    }
}
/**
 * Returns if the version installed locally is latest or not
 * @param releaseVersion current released Version of the Microsoft.DataApiBuilder.exe
 * @param platform current OS
 * @returns true if latest Version of data-api-builder is installed else false
 */
async function isLocalVersionInstalledAndLatest(releaseVersion) {
    const versionInstalled = await getInstalledVersion(constants_1.DATA_API_BUILDER_COMMAND);
    if (versionInstalled) {
        utils_1.logger.silly(`Installed version: ${versionInstalled}`);
        return versionInstalled == releaseVersion;
    }
    utils_1.logger.silly(`${constants_1.DATA_API_BUILDER_COMMAND} is not installed.`);
    return undefined;
}
/**
 * Unzips the given file to destDirectory
 * @param zipFilePath file to unzip
 * @param destDirectory directory to extract
 */
function extractBinary(zipFilePath, destDirectory) {
    var zip = new adm_zip_1.default(zipFilePath);
    zip.extractAllTo(destDirectory, true);
    fs_1.default.unlinkSync(zipFilePath); // delete zip file after extraction
}
/**
 * the Data-api-builder binary for given OS
 * @param platform current OS
 * @returns the Data-api-builder binary for given OS
 */
// exported for testing
function getDefaultDataApiBuilderBinaryForOS(platform) {
    switch (platform) {
        case "win-x64":
            return constants_1.DEFAULT_DATA_API_BUILDER_BINARY.Windows;
        case "osx-x64":
            return constants_1.DEFAULT_DATA_API_BUILDER_BINARY.MacOs;
        case "linux-x64":
            return constants_1.DEFAULT_DATA_API_BUILDER_BINARY.Linux;
        default:
            return constants_1.DEFAULT_DATA_API_BUILDER_BINARY.Windows;
    }
}
exports.getDefaultDataApiBuilderBinaryForOS = getDefaultDataApiBuilderBinaryForOS;
/**
 * Returns installed version if installed else undefined
 * @param command package to know the version
 * @returns installed version
 */
async function getInstalledVersion(command) {
    utils_1.logger.silly(`Running ${constants_1.DATA_API_BUILDER_COMMAND} --version`);
    try {
        const { stdout } = await (0, util_1.promisify)(child_process_1.exec)(`${command} --version`);
        const version = stdout.split(" ")[1].split("\r")[0]; // parsing output which looks like this "Microsoft.DataApiBuilder 0.5.0" (specific to dab)
        return version;
    }
    catch {
        return undefined;
    }
}
//# sourceMappingURL=dab.js.map