"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChoicesForApiLanguage = exports.getDefaultVersion = void 0;
const constants_1 = require("./constants");
const logger_1 = require("./utils/logger");
function getDefaultVersion(apiLanguage) {
    let apiVersion;
    // apiLanguage = apiLanguage.toLowerCase();
    switch (apiLanguage) {
        case "python":
            apiVersion = constants_1.DEFAULT_VERSION.Python;
            break;
        case "dotnet":
            apiVersion = constants_1.DEFAULT_VERSION.Dotnet;
            break;
        case "dotnetisolated":
            apiVersion = constants_1.DEFAULT_VERSION.DotnetIsolated;
            break;
        case "node":
        default:
            apiVersion = constants_1.DEFAULT_VERSION.Node;
            break;
    }
    return apiVersion;
}
exports.getDefaultVersion = getDefaultVersion;
function getChoicesForApiLanguage(apiLanguage) {
    // Refer to this for functions and versions - https://learn.microsoft.com/azure/static-web-apps/configuration#selecting-the-api-language-runtime-version
    logger_1.logger.silly(`ApiLang: ${apiLanguage}`);
    let choices = [];
    switch (apiLanguage) {
        case "python":
            choices = generateChoicesForApi(constants_1.SUPPORTED_VERSIONS.Python);
            break;
        case "dotnet":
            choices = generateChoicesForApi(constants_1.SUPPORTED_VERSIONS.Dotnet);
            break;
        case "dotnetisolated":
            choices = generateChoicesForApi(constants_1.SUPPORTED_VERSIONS.DotnetIsolated);
            break;
        case "node":
        default:
            choices = generateChoicesForApi(constants_1.SUPPORTED_VERSIONS.Node);
            break;
    }
    return choices;
}
exports.getChoicesForApiLanguage = getChoicesForApiLanguage;
/**
 * Generates and returns array of choices
 * @param supportedVersions
 * @returns array of choices
 */
function generateChoicesForApi(supportedVersions) {
    let choices = [];
    for (let index = 0; index < supportedVersions.length; index++) {
        const version = supportedVersions[index];
        const choice = {
            title: version,
            value: version,
        };
        choices.push(choice);
    }
    return choices;
}
//# sourceMappingURL=functions-versions.js.map