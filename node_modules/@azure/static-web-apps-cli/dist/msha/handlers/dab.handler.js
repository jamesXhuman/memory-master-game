"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectClientPrincipalCookies = exports.isDataApiRequest = exports.injectHeaders = exports.handleDataApiRequest = void 0;
const chalk_1 = __importDefault(require("chalk"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const core_1 = require("../../core");
const constants_1 = require("../../core/constants");
const request_middleware_1 = require("../middlewares/request.middleware");
const proxyApi = http_proxy_1.default.createProxyServer({ autoRewrite: true });
(0, core_1.registerProcessExit)(() => {
    core_1.logger.silly(`killing SWA CLI`);
    proxyApi.close(() => core_1.logger.log("Data-Api proxy stopped."));
    process.exit(0);
});
/**
 * Gets response from the Data Api
 * @param req http request url
 * @param res http response after redirecting to Data api builder
 */
function handleDataApiRequest(req, res) {
    const target = (0, constants_1.SWA_CLI_DATA_API_URI)();
    proxyApi.web(req, res, {
        target,
    }, (0, request_middleware_1.onConnectionLost)(req, res, target, "â†³"));
    proxyApi.once("proxyReq", (proxyReq) => {
        injectHeaders(proxyReq, target);
        injectClientPrincipalCookies(proxyReq);
    });
    proxyApi.once("proxyRes", (proxyRes) => {
        core_1.logger.silly(`getting response from remote host`);
        (0, core_1.logRequest)(req, "", proxyRes.statusCode);
    });
    (0, core_1.logRequest)(req, target);
}
exports.handleDataApiRequest = handleDataApiRequest;
// exported for testing
function injectHeaders(req, host) {
    const X_MS_ORIGINAL_URL_HEADER = "x-ms-original-url";
    const X_MS_REQUEST_ID_HEADER = "x-ms-request-id";
    core_1.logger.silly(`injecting headers to Data-api request:`);
    if (!req.getHeader(X_MS_ORIGINAL_URL_HEADER)) {
        req.setHeader(X_MS_ORIGINAL_URL_HEADER, encodeURI(new URL(req.path, host).toString()));
        core_1.logger.silly(` - x-ms-original-url: ${chalk_1.default.yellow(req.getHeader(X_MS_ORIGINAL_URL_HEADER))}`);
    }
    // generate a fake correlation ID
    req.setHeader(X_MS_REQUEST_ID_HEADER, `SWA-CLI-${Math.random().toString(36).substring(2).toUpperCase()}`);
    core_1.logger.silly(` - x-ms-request-id: ${chalk_1.default.yellow(req.getHeader(X_MS_REQUEST_ID_HEADER))}`);
}
exports.injectHeaders = injectHeaders;
/**
 * Checks if the request is Data-api request or not
 * @param req http request url
 * @param rewritePath
 * @returns true if the request is data-api Request else false
 */
function isDataApiRequest(req, rewritePath) {
    const path = rewritePath || req.url;
    return Boolean(path === null || path === void 0 ? void 0 : path.toLowerCase().startsWith(`/data-api/`));
}
exports.isDataApiRequest = isDataApiRequest;
// exported for testing
function injectClientPrincipalCookies(req) {
    const X_MS_CLIENT_PRINCIPAL_HEADER = "X-MS-CLIENT-PRINCIPAL";
    const AUTH_HEADER = "authorization";
    const COOKIE_HEADER = "cookie";
    const CLAIMS_HEADER = "claims";
    core_1.logger.silly(`injecting client principal to Functions request:`);
    const cookie = req.getHeader(COOKIE_HEADER);
    if (cookie && (0, core_1.validateCookie)(cookie)) {
        const user = (0, core_1.decodeCookie)(cookie);
        // Remove claims from client principal to match SWA behaviour. See https://github.com/MicrosoftDocs/azure-docs/issues/86803.
        // The following property deletion can be removed depending on outcome of the above issue.
        if (user) {
            delete user[CLAIMS_HEADER];
        }
        const buff = Buffer.from(JSON.stringify(user), "utf-8");
        const token = buff.toString("base64");
        req.setHeader(X_MS_CLIENT_PRINCIPAL_HEADER, token);
        core_1.logger.silly(` - X-MS-CLIENT-PRINCIPAL: ${chalk_1.default.yellow(req.getHeader(X_MS_CLIENT_PRINCIPAL_HEADER))}`);
        // locally, we set the JWT bearer token to be the same as the cookie value because we are not using the real auth flow.
        // Note: on production, SWA uses a valid encrypted JWT token!
        if (!req.getHeader(AUTH_HEADER)) {
            req.setHeader(AUTH_HEADER, `Bearer ${token}`);
            core_1.logger.silly(` - Authorization: ${chalk_1.default.yellow(req.getHeader(AUTH_HEADER))}`);
        }
    }
    else {
        core_1.logger.silly(` - no valid cookie found`);
    }
}
exports.injectClientPrincipalCookies = injectClientPrincipalCookies;
//# sourceMappingURL=dab.handler.js.map