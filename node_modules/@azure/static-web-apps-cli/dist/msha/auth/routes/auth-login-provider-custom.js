"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../../core");
const constants_1 = require("../../../core/constants");
const config_1 = require("../../../config");
const auth_1 = require("../../../core/utils/auth");
const httpTrigger = async function (context, request, customAuth) {
    var _a, _b, _c, _d, _e;
    await Promise.resolve();
    const providerName = ((_b = (_a = context.bindingData) === null || _a === void 0 ? void 0 : _a.provider) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || "";
    if (providerName != "github" && providerName != "google") {
        context.res = (0, core_1.response)({
            context,
            status: 404,
            headers: { ["Content-Type"]: "text/plain" },
            body: `Provider '${providerName}' not found`,
        });
        return;
    }
    const clientIdSettingName = (_e = (_d = (_c = customAuth === null || customAuth === void 0 ? void 0 : customAuth.identityProviders) === null || _c === void 0 ? void 0 : _c[providerName]) === null || _d === void 0 ? void 0 : _d.registration) === null || _e === void 0 ? void 0 : _e.clientIdSettingName;
    if (!clientIdSettingName) {
        context.res = (0, core_1.response)({
            context,
            status: 404,
            headers: { ["Content-Type"]: "text/plain" },
            body: `ClientIdSettingName not found for '${providerName}' provider`,
        });
        return;
    }
    const clientId = process.env[clientIdSettingName];
    if (!clientId) {
        context.res = (0, core_1.response)({
            context,
            status: 404,
            headers: { ["Content-Type"]: "text/plain" },
            body: `ClientId not found for '${providerName}' provider`,
        });
        return;
    }
    const state = (0, auth_1.newNonceWithExpiration)();
    const authContext = {
        authNonce: state,
        postLoginRedirectUri: (0, auth_1.extractPostLoginRedirectUri)(constants_1.SWA_CLI_APP_PROTOCOL, request.headers.host, request.url),
    };
    const authContextCookieString = JSON.stringify(authContext);
    const authContextCookieEncrypted = (0, auth_1.encryptAndSign)(authContextCookieString);
    const authContextCookie = authContextCookieEncrypted ? btoa(authContextCookieEncrypted) : undefined;
    const hashedState = (0, auth_1.hashStateGuid)(state);
    const redirectUri = `${constants_1.SWA_CLI_APP_PROTOCOL}://${config_1.DEFAULT_CONFIG.host}:${config_1.DEFAULT_CONFIG.port}`;
    const location = providerName === "google"
        ? `https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}/.auth/login/google/callback&scope=openid+profile+email&state=${hashedState}`
        : `https://github.com/login/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}/.auth/login/github/callback&scope=read:user&state=${hashedState}`;
    const cookiesManager = new core_1.CookiesManager(request.headers.cookie);
    if (!authContextCookie) {
        cookiesManager.addCookieToDelete("StaticWebAppsAuthContextCookie");
    }
    else {
        cookiesManager.addCookieToSet({
            name: "StaticWebAppsAuthContextCookie",
            value: authContextCookie,
            domain: config_1.DEFAULT_CONFIG.host,
            path: "/",
            secure: true,
            httpOnly: true,
        });
    }
    context.res = (0, core_1.response)({
        context,
        cookies: cookiesManager.getCookies(),
        status: 302,
        headers: {
            status: 302,
            Location: location,
        },
        body: "",
    });
    return;
};
exports.default = httpTrigger;
//# sourceMappingURL=auth-login-provider-custom.js.map